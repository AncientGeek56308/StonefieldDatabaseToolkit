*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="sffont.vcx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS sfselectfont AS sfcontainer OF "sfctrls.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="cmdFont" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblFont" UniqueID="" Timestamp="" />

	#INCLUDE "sffont.h"
	*<DefinedPropArrayMethod>
		*m: cfontname_access
		*m: cfontname_assign
		*m: lfontbold_access
		*m: lfontbold_assign
		*m: lfontitalic_access
		*m: lfontitalic_assign
		*m: nfontsize_access
		*m: nfontsize_assign
		*m: setfont		&& Sets the font information for the container
		*m: updatefont		&& Updates the label with the current font information
		*p: cfontname		&& The selected fontname
		*p: lfontbold		&& .T. if the selected font is bold
		*p: lfontitalic		&& .T. if the selected font is bold
		*p: nfontsize		&& The selected font size
	*</DefinedPropArrayMethod>

	cfontname = Arial		&& The selected fontname
	Height = 27
	lfontbold = .F.		&& .T. if the selected font is bold
	lfontitalic = .F.		&& .T. if the selected font is bold
	Name = "sfselectfont"
	nfontsize = 9		&& The selected font size
	Width = 287

	ADD OBJECT 'cmdFont' AS sfgetfont WITH ;
		Left = 0, ;
		Name = "cmdFont", ;
		Top = 0
		*< END OBJECT: ClassLib="sfbutton.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'lblFont' AS sflabel WITH ;
		Caption = "9 pt. Arial", ;
		Left = 90, ;
		Name = "lblFont", ;
		Top = 5
		*< END OBJECT: ClassLib="sfctrls.vcx" BaseClass="label" />
	
	PROCEDURE cfontname_access
		return This.cmdFont.cFontName
		
	ENDPROC

	PROCEDURE cfontname_assign
		lparameters tcValue
		This.cmdFont.cFontName = tcValue
		
	ENDPROC

	PROCEDURE lfontbold_access
		return This.cmdFont.lFontBold
		
	ENDPROC

	PROCEDURE lfontbold_assign
		lparameters tlValue
		This.cmdFont.lFontBold = tlValue
		
	ENDPROC

	PROCEDURE lfontitalic_access
		return This.cmdFont.lFontItalic
		
	ENDPROC

	PROCEDURE lfontitalic_assign
		lparameters tlValue
		This.cmdFont.lFontItalic = tlValue
		
	ENDPROC

	PROCEDURE nfontsize_access
		return This.cmdFont.nFontSize
		
	ENDPROC

	PROCEDURE nfontsize_assign
		lparameters tnValue
		This.cmdFont.nFontSize = tnValue
		
	ENDPROC

	PROCEDURE setfont		&& Sets the font information for the container
		* Set the font information.
		
		lparameters tcFontName, ;
			tnFontSize, ;
			tlFontBold, ;
			tlFontItalic
		local laFont[1], ;
			llFontOK
		assert vartype(tcFontName) = 'C' and not empty(tcFontName) ;
			message 'SFSelectFont.SetFont: invalid tcFontName parameter'
		assert vartype(tnFontSize) = 'N' and between(tnFontSize, 1, 127) ;
			message 'SFSelectFont.SetFont: invalid tnFontSize parameter'
		assert vartype(tlFontBold) = 'L' ;
			message 'SFSelectFont.SetFont: invalid tlFontBold parameter'
		assert vartype(tlFontItalic) = 'L' ;
			message 'SFSelectFont.SetFont: invalid tlFontItalic parameter'
		llFontOK = afont(laFont, tcFontName, tnFontSize)
		assert llFontOK and laFont[1] ;
			message 'SFSelectFont.SetFont: ' + transform(tnFontSize) + ;
			' is not a valid font size for ' + tcFontName
		with This.cmdFont
			.cFontName   = tcFontName
			.nFontSize   = tnFontSize
			.lFontBold   = tlFontBold
			.lFontItalic = tlFontItalic
		endwith
		This.UpdateFont()
		
	ENDPROC

	PROCEDURE updatefont		&& Updates the label with the current font information
		* Update the label with the current font information.
		
		with This
			.lblFont.Caption    = transform(.cmdFont.nFontSize) + ' ' + ccPOINT + ;
				' ' + .cmdFont.cFontName
			.lblFont.FontName   = .cmdFont.cFontName
			.lblFont.FontBold   = .cmdFont.lFontBold
			.lblFont.FontItalic = .cmdFont.lFontItalic
		endwith
		
	ENDPROC

	PROCEDURE cmdFont.Click
		* Display the selected font information in the label.
		
		dodefault()
		This.Parent.UpdateFont()
		
	ENDPROC

ENDDEFINE
