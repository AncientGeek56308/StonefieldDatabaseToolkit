*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="sfmessage.vcx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS sfmessagebutton AS sfcommandbutton OF "sfctrls.vcx" 		&& A CommandButton class used in SFMessageForm
 	*< CLASSDATA: Baseclass="commandbutton" Timestamp="" Scale="Pixels" Uniqueid="" />

	AutoSize = .T.
	FontName = "MS Sans Serif"
	Name = "sfmessagebutton"
	
	PROCEDURE about
		*==============================================================================
		* Class:				SFMessageButton
		* Based On:				SFCommandButton (SFCTRLS.VCX)
		* Purpose:				A CommandButton class used by SFMessageForm
		* Author:				Doug Hennig
		* Copyright:			(c) 1996 Stonefield Systems Group Inc.
		* Last revision:		04/08/97
		*
		* Changes in "Based On" class properties:
		*	AutoSize:			.T.
		*	FontName:			MS Sans Serif
		*
		* Changes in "Based On" class methods:
		*	Click:				sets the form's cChoice property to This.Caption and
		*						releases the form
		*
		* Custom public properties added:
		*	None
		*
		* Custom protected properties added:
		*	None
		*
		* Custom public methods added:
		*	None
		*
		* Custom protected methods added:
		*	None
		*==============================================================================
		
	ENDPROC

	PROCEDURE Click
		with Thisform
		    .cChoice = strtran(strtran(strtran(This.Caption, '\<'), '\!'), '\?')
			.Release()
		endwith
		
	ENDPROC

ENDDEFINE

DEFINE CLASS sfmessageform AS sfmodaldialog OF "sfctrls.vcx" 		&& A class to display a message and variable options
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="edtMessage" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="imgIcon" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="oTimer" UniqueID="" Timestamp="" />

	#INCLUDE "sfmessage.h"
	*<DefinedPropArrayMethod>
		*m: adjustform		&& Adjusts the form dimensions to fit the other controls.
		*m: setbuttons		&& Creates and set properties for the buttons.
		*m: setmessage		&& Sets the properties of edtMessage.
		*p: cchoice		&& The caption of the button chosen by the user.
		*p: cchoices		&& A comma-delimited list of captions for the buttons in the form.
		*p: cicon		&& The name of a BMP or ICO file to use for the picture of the "icon" image.
		*p: cmessage		&& The message to display.
		*p: creturn		&& The name of the variable or property to update with the return value.
		*p: lbeep		&& .T. to make a beep sound.
		*p: ntimeout		&& The number of seconds after which the dialog goes away by itself; 0 means no timeout
	*</DefinedPropArrayMethod>

	Caption = ""
	cchoice = 		&& The caption of the button chosen by the user.
	cchoices = 		&& A comma-delimited list of captions for the buttons in the form.
	cicon = STOP.ICO		&& The name of a BMP or ICO file to use for the picture of the "icon" image.
	Closable = .F.
	cmessage = 		&& The message to display.
	ControlBox = .F.
	creturn = 		&& The name of the variable or property to update with the return value.
	DoCreate = .T.
	lbeep = .T.		&& .T. to make a beep sound.
	Name = "sfmessageform"
	ntimeout = 0		&& The number of seconds after which the dialog goes away by itself; 0 means no timeout

	ADD OBJECT 'edtMessage' AS sfeditbox WITH ;
		BackStyle = 0, ;
		BorderStyle = 0, ;
		FontName = "MS Sans Serif", ;
		FontSize = 8, ;
		Height = 160, ;
		Left = 76, ;
		Name = "edtMessage", ;
		ScrollBars = 0, ;
		Top = 15, ;
		Width = 280
		*< END OBJECT: ClassLib="sfctrls.vcx" BaseClass="editbox" />

	ADD OBJECT 'imgIcon' AS sfimage WITH ;
		Height = 32, ;
		Left = 5, ;
		Name = "imgIcon", ;
		Picture = stop.bmp, ;
		Top = 10, ;
		Width = 32
		*< END OBJECT: ClassLib="sfctrls.vcx" BaseClass="image" />

	ADD OBJECT 'oTimer' AS sftimer WITH ;
		Enabled = .F., ;
		Left = 10, ;
		Name = "oTimer", ;
		Top = 45
		*< END OBJECT: ClassLib="sfctrls.vcx" BaseClass="timer" />
	
	PROTECTED PROCEDURE adjustform		&& Adjusts the form dimensions to fit the other controls.
		* Adjust the height and width of the form and the button positions.
		
		lparameters tnTotalLen
		local lnButtonTop, ;
			lnButtonLeft, ;
			lnNumButtons, ;
			lnI, ;
			lcButton
		with This
			lnButtonTop  = max(.edtMessage.Top + .edtMessage.Height, ;
				.imgIcon.Top + .imgIcon.Height) + cnMESSAGE_SPACING
			.Height      = lnButtonTop + .cmdChoice1.Height + cnFORM_SPACING
			.Width       = max(tnTotalLen + cnBUTTON_LEFT * 2, ;
				.edtMessage.Left + .edtMessage.Width + cnBUTTON_LEFT * 2)
			lnButtonLeft = max(cnBUTTON_LEFT, int((.Width - tnTotalLen)/2))
			lnNumButtons = occurs(',', .cChoices) + 1
			for lnI = 1 to lnNumButtons
				lcButton = 'cmdChoice' + transform(lnI)
				with evaluate('This.' + lcButton)
					.Top     = lnButtonTop
					.Left    = lnButtonLeft + (.Width + cnBUTTON_SPACING) * (lnI - 1)
					.Visible = .T.
				endwith
			next lnI
		endwith
		
	ENDPROC

	PROCEDURE Destroy
		with This
			store .cChoice to (.cReturn)
		endwith
		
	ENDPROC

	PROTECTED PROCEDURE setbuttons		&& Creates and set properties for the buttons.
		* Define the buttons.
		
		local lnOld, ;
			lnButtonLen, ;
			lnNumChoices, ;
			llClassLib, ;
			lnI, ;
			lnPos, ;
			lnStart, ;
			lcCaption, ;
			lcButton, ;
			lnTotalLen
		with This
			lnOld       = 0
			lnButtonLen = 0
		
		* Create a button for each choice in This.cChoices and set its Caption.
		* Determine the maximum width so later all buttons can be sized the same.
		
			lnNumChoices = occurs(',', .cChoices) + 1
			llClassLib   = not upper(.ClassLibrary) $ set('CLASSLIB')
			if llClassLib
				set classlib to (.ClassLibrary) additive
			endif llClassLib
			for lnI = 1 to lnNumChoices
				lnPos     = at(',', .cChoices, lnI)
				lnStart   = iif(lnI = 1, 1, lnOld + 1)
			    lcCaption = alltrim(substr(.cChoices, lnStart, ;
			    	iif(lnPos <> 0, lnPos - lnStart - 1, len(.cChoices) - lnStart) + 1))
				lcButton  = 'cmdChoice' + transform(lnI)
				.AddObject(lcButton, 'SFMessageButton')
				with evaluate('.' + lcButton)
					.Caption    = lcCaption
					lnButtonLen = max(.Width, lnButtonLen)
				endwith
			    lnOld = lnPos
			next lnI
			if llClassLib
				release classlib (.ClassLibrary)
			endif llClassLib
		
		* Determine the total length of the buttons and adjust all button widths to the
		* same width.
		
			lnTotalLen = lnNumChoices * lnButtonLen + ;
				(lnNumChoices - 1) * cnBUTTON_SPACING
			for lnI = 1 to lnNumChoices
				lcButton = 'cmdChoice' + transform(lnI)
				with evaluate('This.' + lcButton)
					.AutoSize = .F.
					.Width    = lnButtonLen
				endwith
			next lnI
		endwith
		return lnTotalLen
		
	ENDPROC

	PROTECTED PROCEDURE setmessage		&& Sets the properties of edtMessage.
		* Set the message and calculate the number of lines.
		
		lparameters tnButtonLen
		local lcFontName, ;
			lnFontSize, ;
			lcStyle, ;
			lnMemoWidth, ;
			laLines[1], ;
			lnMessageLines, ;
			lnMaxWidth, ;
			lnMessageWidth, ;
			lnI, ;
			lcText
		with This.edtMessage
			lcFontName     = .FontName
			lnFontSize     = .FontSize
			lcStyle        = This.oUtility.CalcObjectStyle(This.edtMessage)
			.Value         = This.cMessage
			.Left          = This.imgIcon.Left + This.imgIcon.Width + cnICON_SPACING
			lnMessageLines = alines(laLines, This.cMessage)
			lnMaxWidth     = _screen.Width/(3 * fontmetric(6, lcFontName, lnFontSize, ;
				lcStyle))
			lnMessageWidth = 0
			for lnI = 1 to lnMessageLines
				lcText         = strtran(laLines[lnI], ccTAB, space(4))
				lnMessageWidth = max(lnMessageWidth, txtwidth(lcText, lcFontName, ;
					lnFontSize, lcStyle))
			next lnI
			lnMessageWidth = min(lnMessageWidth, lnMaxWidth) + cnMESSAGE_ADJUST
			lnMemoWidth    = set('MEMOWIDTH')
			set memowidth to lnMessageWidth
			lnMessageLines = memlines(.Value)
			set memowidth to lnMemoWidth
			.Width  = max(tnButtonLen - .Left, ;
				lnMessageWidth * fontmetric(6, lcFontName, lnFontSize, lcStyle) + ;
				2 * .Margin + 1)
			.Height = lnMessageLines * (fontmetric(1, lcFontName, lnFontSize, lcStyle) + ;
				fontmetric(5, lcFontName, lnFontSize, lcStyle)) + 2 * .Margin
		endwith
		
	ENDPROC

	PROCEDURE Show
		lparameters tnStyle
		local lnTotalLen
		with This
		
		* If no caption for the form has been specified, set it to that for the screen.
		
			if empty(.Caption)
				.Caption = _screen.Caption
			endif empty(.Caption)
		
		* Set the picture for the image.
		
			if not empty(.cIcon)
				.imgIcon.Picture = .cIcon
			endif not empty(.cIcon)
		
		* Set the message and the buttons based on properties that've been set.
		
			lnTotalLen = .SetButtons()
			.SetMessage(lnTotalLen)
			.AdjustForm(lnTotalLen)
		
		* If we have a timeout value, set our timer interval to that value.
		
			if vartype(.nTimeout) = 'N' and .nTimeout > 0
				.oTimer.Interval = .nTimeout * 1000
				.oTimer.Enabled  = .T.
			endif vartype(.nTimeout) = 'N' ...
		
		* If necessary, make a beep.
		
			if .lBeep
				.oUtility.ErrorSound()
			endif .lBeep
		endwith
		
	ENDPROC

	PROCEDURE edtMessage.ProgrammaticChange
		* This comment prevents anything from happening when a value is assigned.
		
	ENDPROC

	PROCEDURE edtMessage.When
		return .F.
		
	ENDPROC

	PROCEDURE oTimer.Timer
		This.Enabled = .F.
		Thisform.Release()
		
	ENDPROC

ENDDEFINE

DEFINE CLASS sfmessagemgr AS sfcustom OF "sfctrls.vcx" 		&& A message manager class
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "sfmessage.h"
	*<DefinedPropArrayMethod>
		*m: errormessage		&& Displays an error message
		*m: message		&& Displays a message using MESSAGEBOX
		*m: messagedialog		&& Display a message using a custom class
		*m: yesno		&& A method that displays a Yes or No type dialog and returns .T if Yes was chosen.
		*m: yesnocancel		&& Display a Yes, No, or Cancel dialog
		*p: cdefaulttitle		&& The default title for message windows
		*p: cmessageformclass		&& The name of a class to instantiate in the MessageDialog method
		*p: cmessageformlibrary		&& The library the message dialog class is in
		*p: ndefaultbuttons		&& The default buttons type for the dialog.
		*p: ndefaulticon		&& The default icon for the dialog.
	*</DefinedPropArrayMethod>

	PROTECTED ndefaultbuttons,ndefaulticon
	cdefaulttitle = 		&& The default title for message windows
	cmessageformclass = SFMessageForm		&& The name of a class to instantiate in the MessageDialog method
	cmessageformlibrary = SFMessage.vcx		&& The library the message dialog class is in
	Name = "sfmessagemgr"
	ndefaultbuttons = 0		&& The default buttons type for the dialog.
	ndefaulticon = 0		&& The default icon for the dialog.
	
	PROCEDURE about
		*==============================================================================
		* Class:				SFMessageMgr
		* Based On:				SFCustom (SFCTRLS.VCX)
		* Purpose:				Display messages
		* Author:				Doug Hennig
		* Copyright:			(c) 1996-2002 Stonefield Systems Group Inc.
		* Last revision:		04/19/2002
		* Include file:			SFMESSAGE.H
		*
		* Changes in "Based On" class properties:
		*	None
		*
		* Changes in "Based On" class methods:
		*	Init:				initialize defaults
		*
		* Custom public properties added:
		*	cDefaultTitle:		the default title for message windows
		*	cMessageFormClass:	the name of a class to instantiate in the MessageDialog
		*						method
		*
		* Custom protected properties added:
		*	nDefaultButtons:	the button parameter to use for MESSAGEBOX (default =
		*						0) if not passed to the Message method
		*	nDefaultIcon:		the icon parameter to use for MESSAGEBOX (default =
		*						0) if not passed to the Message method
		*
		* Custom public methods added:
		*	ErrorMessage:		displays an error message
		*	Message:			display a message using MESSAGEBOX
		*	MessageDialog:		display a message using a custom class
		*	YesNo:				display a Yes/No dialog
		*	YesNoCancel:		display a Yes, No, or Cancel dialog
		*
		* Custom protected methods added:
		*	None
		*==============================================================================
		
	ENDPROC

	PROCEDURE errormessage		&& Displays an error message
		*==============================================================================
		* Method:			ErrorMessage
		* Status:			Public
		* Purpose:			Display a message dialog
		* Author:			Doug Hennig
		* Copyright:		(c) 1996-2001 Stonefield Systems Group Inc.
		* Last revision:	06/05/2001
		* Parameters:		tcMessage - the message to display
		*					tcTitle   - the title for the dialog (optional: if it isn't
		*						specified, This.cDefaultTitle is used)
		* Returns:			none
		* Environment in:	none
		* Environment out:	a MessageBox dialog was displayed
		*==============================================================================
		
		lparameters tcMessage, ;
			tcTitle
		local lcTitle
		
		* First, let's straighten out the parameters, because not all may be passed.
		
		assert pcount() > 0 and vartype(tcMessage) = 'C' and not empty(tcMessage) ;
			message 'SFMessageMgr.Message: Improper arguments'
		lcTitle = iif(pcount() = 1, This.cDefaultTitle, tcTitle)
		
		* Display the message and return.
		
		messagebox(tcMessage, MB_OK + MB_ICONSTOP, lcTitle)
		return
		
	ENDPROC

	PROCEDURE Init
		*==============================================================================
		* Method:			Init
		* Status:			Public
		* Purpose:			Initialize this class
		* Author:			Doug Hennig
		* Copyright:		(c) 1996-2001 Stonefield Systems Group Inc.
		* Last revision:	06/05/2001
		* Parameters:		tcTitle - the title for the dialog when it isn't passed to
		*						a message method
		* Returns:			.T.
		* Environment in:	none
		* Environment out:	This.nDefaultIcon is set to the Exclamation icon
		*					This.nDefaultButtons is set to an OK button
		*					This.cDefaultTitle is set to tcTitle if it was passed
		*==============================================================================
		
		lparameters tcTitle
		with This
			.nDefaultIcon    = MB_ICONEXCLAMATION
			.nDefaultButtons = MB_OK
			.cDefaultTitle   = iif(vartype(tcTitle) = 'C', tcTitle, '')
		endwith
		dodefault()
		
	ENDPROC

	PROCEDURE message		&& Displays a message using MESSAGEBOX
		*==============================================================================
		* Function:			Message
		* Status:			Public
		* Purpose:			Display a message dialog
		* Author:			Doug Hennig
		* Copyright:		(c) 1996-2001 Stonefield Systems Group Inc.
		* Last revision:	06/05/2001
		* Parameters:		tcMessage - the message to display
		*					tcTitle   - the title for the dialog (optional: if it isn't
		*						specified, This.cDefaultTitle is used)
		*					tnButtons - the MessageBox button type value (optional: if
		*						it isn't specified, This.nDefaultButtons is used)
		*					tnIcon    - the MessageBox icon value (optional: if it
		*						isn't specified, This.nDefaultIcon is used)
		* Returns:			the MessageBox return value
		* Environment in:	none
		* Environment out:	a MessageBox dialog was displayed
		*==============================================================================
		
		lparameters tcMessage, ;
			tcTitle, ;
			tnButtons, ;
			tnIcon
		local lcTitle, ;
			lnButtons, ;
			lnReturn
		
		* First, let's straighten out the parameters, because not all may be passed.
		
		with This
			assert pcount() > 0 and vartype(tcMessage) = 'C' and not empty(tcMessage) ;
				message 'SFMessageMgr.Message: Improper arguments'
			do case
				case pcount() = 1
					lcTitle   = .cDefaultTitle
					lnButtons = .nDefaultIcon + .nDefaultButtons
				case pcount() = 2
					lcTitle   = tcTitle
					lnButtons = .nDefaultIcon + .nDefaultButtons
				case pcount() = 3
					lcTitle   = tcTitle
					lnButtons = tnButtons + .nDefaultIcon
				otherwise
					lcTitle   = tcTitle
					lnButtons = tnButtons + tnIcon
					lnButtons = iif(vartype(tnButtons) = 'N', tnButtons, 0) + tnIcon
			endcase
		endwith
		lcTitle = iif(vartype(lcTitle) = 'C', lcTitle, '')
		
		* Display the message and return the selected value.
		
		lnReturn = messagebox(tcMessage, lnButtons, lcTitle)
		return lnReturn
		
	ENDPROC

	PROCEDURE messagedialog		&& Display a message using a custom class
		*==============================================================================
		* Method:			MessageDialog
		* Status:			Public
		* Purpose:			Displays a message dialog
		* Author:			Doug Hennig
		* Copyright:		(c) 1996-2001 Stonefield Systems Group Inc.
		* Last revision:	06/05/2001
		* Parameters:		tcMessage - the message to display
		*					tcButtons - a comma-delimited list of button captions
		*					tcTitle   - the title for the dialog (optional: if it isn't
		*						specified, This.cDefaultTitle is used)
		*					tcIcon    - the name of a BMP or ICO file to use as the
		*						Picture for the "icon" graphic (optional: if it isn't
		*						specified, the Picture for the object in the class
		*						definition is used)
		*					tnTimeout - the number of seconds after which the dialog
		*						goes away by itself (optional: if it isn't passed or 0
		*						is passed, there's no timeout)
		* Returns:			the caption of the button the user chose, or a blank string
		*						if an error occurred
		* Environment in:	none
		* Environment out:	the dialog box was displayed and the user made a choice
		*==============================================================================
		
		lparameters tcMessage, ;
			tcButtons, ;
			tcTitle, ;
			tcIcon, ;
			tnTimeout
		local lcIcon, ;
			lcTitle, ;
			loMessage
		private lcReturn
		
		* First, let's straighten out the parameters, because not all may be passed.
		
		lcIcon = ''
		assert pcount() > 1 and vartype(tcMessage) = 'C' and not empty(tcMessage) and ;
			vartype(tcButtons) = 'C' and not empty(tcButtons) ;
			message 'SFMessageMgr.MessageDialog: Improper arguments'
		lcTitle = iif(empty(tcTitle), This.cDefaultTitle, tcTitle)
		lcIcon  = iif(empty(tcIcon), '', tcIcon)
		
		* Create an object of the class defined in the cMessageFormClass property and
		* set some of its properties. Call its Show() method to display the dialog and
		* set the return value.
		
		lcReturn  = ''
		loMessage = MakeObject(This.cMessageFormClass, This.cMessageFormLibrary)
		if vartype(loMessage) = 'O'
			with loMessage
				.cMessage = tcMessage
				.cChoices = tcButtons
				.Caption  = lcTitle
				.cIcon    = lcIcon
				.cReturn  = 'lcReturn'
				.lBeep    = .T.
				.nTimeout = tnTimeout
			endwith
		
		* Display the message dialog (this must exist outside the WITH statement or the
		* form can't be released.
		
			loMessage.Show(1)
		endif vartype(loMessage) = 'O'
		return lcReturn
		
	ENDPROC

	PROCEDURE yesno		&& A method that displays a Yes or No type dialog and returns .T if Yes was chosen.
		*==============================================================================
		* Method:			YesNo
		* Status:			Public
		* Purpose:			Display a YesNo dialog
		* Author:			Doug Hennig
		* Copyright:		(c) 1996-2001 Stonefield Systems Group Inc.
		* Last revision:	06/05/2001
		* Parameters:		tcMessage - the message to display
		*					tlDefault - the default value (.T. for Yes)
		*					tcTitle   - the title for the dialog (optional: if it isn't
		*						specified, This.cDefaultTitle is used)
		* Returns:			.T. if Yes was chosen, .F. if no was chosen
		* Environment in:	none
		* Environment out:	a MessageBox dialog was displayed
		*==============================================================================
		
		lparameters tcMessage, ;
			tlDefault, ;
			tcTitle
		local lcTitle, ;
			llReturn
		
		* First, let's straighten out the parameters, because not all may be passed.
		
		assert pcount() > 0 and vartype(tcMessage) = 'C' and not empty(tcMessage) ;
			message 'SFMessageMgr.YesNo: Improper arguments'
		lcTitle = iif(pcount() < 3, This.cDefaultTitle, tcTitle)
		
		* Display the message and return the selected value.
		
		llReturn = messagebox(tcMessage, MB_YESNO + MB_ICONQUESTION + ;
			iif(tlDefault, MB_DEFBUTTON1, MB_DEFBUTTON2), lcTitle) = IDYES
		return llReturn
		
	ENDPROC

	PROCEDURE yesnocancel		&& Display a Yes, No, or Cancel dialog
		*==============================================================================
		* Method:			YesNoCancel
		* Status:			Public
		* Purpose:			Display a Yes, No, or Cancel dialog
		* Author:			Doug Hennig
		* Copyright:		(c) 2002 Stonefield Systems Group Inc.
		* Last revision:	04/19/2002
		* Parameters:		tcMessage - the message to display
		*					tlDefault - the default value (.T. for Yes)
		*					tcTitle   - the title for the dialog (optional: if it isn't
		*						specified, This.cDefaultTitle is used)
		* Returns:			0 if No was chosen, 1 if Yes was chosen, or -1 if Cancel
		*						was chosen
		* Environment in:	none
		* Environment out:	a MessageBox dialog was displayed
		*==============================================================================
		
		lparameters tcMessage, ;
			tlDefault, ;
			tcTitle
		local lcTitle, ;
			lnReturn
		
		* First, let's straighten out the parameters, because not all may be passed.
		
		assert pcount() > 0 and vartype(tcMessage) = 'C' and not empty(tcMessage) ;
			message 'SFMessageMgr.YesNoCancel: Improper arguments'
		lcTitle = iif(pcount() < 3, This.cDefaultTitle, tcTitle)
		
		* Display the message and return the selected value.
		
		lnReturn = messagebox(tcMessage, MB_YESNOCANCEL + MB_ICONQUESTION + ;
			iif(tlDefault, MB_DEFBUTTON1, MB_DEFBUTTON2), lcTitle)
		do case
			case lnReturn = IDNO
				lnReturn = 0
			case lnReturn = IDYES
				lnReturn = 1
			otherwise
				lnReturn = -1
		endcase
		return lnReturn
		
	ENDPROC

ENDDEFINE
