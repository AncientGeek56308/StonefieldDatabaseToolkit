*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="sfcollection.vcx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS sfcollection AS sfcustom OF "sfctrls.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "sfctrls.h"
	*<DefinedPropArrayMethod>
		*m: additem		&& Adds a new item to the collection
		*m: clear		&& Removes all items from the collection
		*m: fillcollection		&& Abstract method to fill the collection with members
		*m: getarray		&& Fills the specified array with member names
		*m: getindex		&& Determines the index number of the specified object
		*m: isvalidname		&& Returns .T. if the name of a new item is valid
		*m: item		&& Returns an object reference to the specified item
		*m: removeitem		&& Removes an item from the collection
		*p: count		&& The number of items in the collection
		*a: aitems[1,0]		&& An array of references for the collection objects
	*</DefinedPropArrayMethod>

	PROTECTED aitems
	count = 0		&& The number of items in the collection
	Name = "sfcollection"
	
	PROCEDURE about
		*==============================================================================
		* Class:					SFCollection
		* Based On:					SFCustom
		* Purpose:					Base class for all collections
		* Author:					Doug Hennig
		* Copyright:				(c) 1996-2003 Stonefield Systems Group Inc.
		* Last revision:			03/12/2003
		* Include file:				SFCTRLS.H
		*
		* Changes in "Based On" class properties:
		*	None
		*
		* Changes in "Based On" class methods:
		*	Destroy:				nuke all member objects
		*	Init:					call This.Clear()
		*
		* Custom public properties added:
		*	Count:					the number of items in the collection
		*
		* Custom protected properties added:
		*	aItems:					an array of references for the collection objects
		*
		* Custom public methods added:
		*	AddItem:				adds a new item to the collection
		*	Clear:					removes all items from the collection
		*	FillCollection:			abstract method to fill the collection with members
		*	GetArray:				fills the specified array with member names
		*	Item:					returns an object reference to the specified item
		*	RemoveItem:				removes an item from the collection
		*
		* Custom protected methods added:
		*	GetIndex:				determines the index number of the specified object
		*	IsValidName:			returns .T. if the name of a new item is valid
		*==============================================================================
		
	ENDPROC

	PROCEDURE additem		&& Adds a new item to the collection
		*==============================================================================
		* Method:			AddItem
		* Status:			Public
		* Purpose:			Add an item of the defined class to our collection
		* Author:			Doug Hennig
		* Copyright:		(c) 1998-2002 Stonefield Systems Group Inc.
		* Last revision:	04/02/2002
		* Parameters:		tcClass   - the class of the object to create, or an object
		*						to store in the collection
		*					tcLibrary - the library of the object to create, or the
		*						name to assign to the object if tcClass is an object
		*					tcName    - the name to assign to the object
		* Returns:			an object reference to the new item
		* Environment in:	the specified class and library exist
		* Environment out:	This.aItems contains a new row, with the first column
		*						containing an object reference to a object of the
		*						specified class and the second column containing the
		*						specified name. The Name property of the object is set
		*						to the specified name if it's a valid object name. If
		*						the object has a cName property, it's set to the
		*						specified name
		*					This.Count is set to the number of contained items
		*==============================================================================
		
		lparameters tcClass, ;
			tcLibrary, ;
			tcName
		local loItem, ;
			lcName
		with This
		
		* If the first parameter is an object, get the name from the second parameter.
		
			if vartype(tcClass) = 'O'
				lcName = tcLibrary
			else
				lcName = tcName
			endif vartype(tcClass) = 'O'
		
		* See if an object with the specified name already exists in our collection.
		
			if vartype(lcName) = 'C' and not empty(lcName)
				loItem = .Item(lcName)
			else
				loItem = .NULL.
			endif vartype(lcName) = 'C' ...
		
		* If the object doesn't already exist, create a new row in the array (if
		* necessary) and increment This.Count.
		
			if vartype(loItem) <> 'O'
				.Count = iif(isnull(.aItems[1, 1]), 1, alen(.aItems, 1) + 1)
				dimension .aItems[.Count, 2]
		
		* If the first parameter is an object, use it. Otherwise, instantiate the
		* specified object. Store the object in the first column of the new array row.
		
				if vartype(tcClass) = 'O'
					loItem = tcClass
				else
					loItem = MakeObject(tcClass, tcLibrary)
				endif vartype(tcClass) = 'O'
				if vartype(loItem) = 'O'
					.aItems[.Count, 1] = loItem
		
		* If a name was specified, store it in the second column of the array row, the
		* cName property of the object (if it exists), and the Name property of the
		* object if the specified name is a valid object name.
		
					if vartype(lcName) = 'C' and not empty(lcName)
						.aItems[.Count, 2] = iif(clVFP7ORLATER, lcName, upper(lcName))
						if pemstatus(loItem, 'cName', 5)
							loItem.cName = lcName
						endif pemstatus(loItem, 'cName', 5)
						if .IsValidName(lcName)
							loItem.Name = lcName
						else
							loItem.Name = sys(2015)
						endif .IsValidName(lcName)
					else
						.aItems[.Count, 2] = ''
					endif vartype(lcName) = 'C' ...
				endif vartype(loItem) = 'O'
			endif vartype(loItem) <> 'O'
		endwith
		return loItem
		
	ENDPROC

	PROCEDURE clear		&& Removes all items from the collection
		*==============================================================================
		* Method:			Clear
		* Status:			Public
		* Purpose:			Removes all items from the collection
		* Author:			Doug Hennig
		* Copyright:		(c) 1997 Stonefield Systems Group Inc.
		* Last revision:	06/01/98
		* Parameters:		none
		* Returns:			.T.
		* Environment in:	none
		* Environment out:	This.aItems contains a single row with .NULL. for the item
		*						and a blank name
		*					This.Count is set to 0
		*==============================================================================
		
		with This
			dimension .aItems[1, 2]
			.aItems[1, 1] = .NULL.
			.aItems[1, 2] = ''
			.Count        = 0
		endwith
		
	ENDPROC

	PROCEDURE fillcollection		&& Abstract method to fill the collection with members
	ENDPROC

	PROCEDURE getarray		&& Fills the specified array with member names
		lparameters taArray
		local lnCount, ;
			lnI
		with This
			lnCount = .Count
			if lnCount = 0
				dimension taArray[1]
				taArray[1] = ''
			else
				dimension taArray[lnCount]
				for lnI = 1 to lnCount
					taArray[lnI] = .aItems[lnI, 2]
				next lnI
			endif lnCount = 0
		endwith
		return lnCount
		
	ENDPROC

	PROTECTED PROCEDURE getindex		&& Determines the index number of the specified object
		*==============================================================================
		* Method:			GetIndex
		* Status:			Protected
		* Purpose:			Determines the index number of the specified object
		* Author:			Doug Hennig
		* Copyright:		(c) 1998-2003 Stonefield Systems Group Inc.
		* Last revision:	03/12/2003
		* Parameters:		tuIndex - the numeric index value for the item or the
		*						item's name
		* Returns:			the item's index if it was found or 0 if not
		* Environment in:	This.aItems contains the name of each item in the second
		*						column
		*					This.Count contains the number of items in the collection
		* Environment out:	none
		*==============================================================================
		
		lparameters tuIndex
		local lnIndex, ;
			lcType, ;
			lcName, ;
			llExact, ;
			lcExact
		with This
			lnIndex = 0
			lcType  = vartype(tuIndex)
			do case
		
		* If the index was specified as a string, try to find a member object with that
		* name.
		
				case lcType = 'C'
					lcName = upper(alltrim(strtran(tuIndex, ccNULL)))
					if right(lcName, 1) = '*'
						lcName = left(lcName, len(lcName) - 1)
						llExact = .F.
					else
						llExact = .T.
					endif right(lcName, 1) <> '*'
		#if clVFP7ORLATER
					lnIndex = ascan(.aItems, lcName, -1, -1, 2, iif(llExact, 15, 13))
		#else
					lnIndex = ascan(.aItems, lcName)
					lnIndex = iif(lnIndex = 0, 0, asubscript(.aItems, lnIndex, 1))
		#endif
		
		* If the index wasn't numeric, give an error.
		
				case not lcType $ 'NIFBY'
					error cnERR_DATA_TYPE_MISMATCH
		
		* If the index was numeric, give an error if it's out of range.
		
				otherwise
					lnIndex = int(tuIndex)
					if not between(lnIndex, 1, .Count)
						error cnERR_INVALID_SUBSCRIPT
						lnIndex = 0
					endif not between(lnIndex, 1, .Count)
			endcase
		endwith
		return lnIndex
		
	ENDPROC

	PROCEDURE Init
		*==============================================================================
		* Method:			Init
		* Status:			Public
		* Purpose:			Initialize the collection to nothing
		* Author:			Doug Hennig
		* Copyright:		(c) 1997 Stonefield Systems Group Inc.
		* Last revision:	08/03/99
		* Parameters:		none
		* Returns:			.T.
		* Environment in:	none
		* Environment out:	see This.Clear()
		*==============================================================================
		
		This.Clear()
		dodefault()
		
	ENDPROC

	PROTECTED PROCEDURE isvalidname		&& Returns .T. if the name of a new item is valid
		*==============================================================================
		* Method:			IsValidName
		* Status:			Protected
		* Purpose:			Returns .T. if the name of a new item is valid
		* Author:			Doug Hennig
		* Copyright:		(c) 1998, 2001 Stonefield Systems Group Inc.
		* Last revision:	03/05/2001
		* Parameters:		tcName - the name to assign to the item
		* Returns:			.T. if the name is valid
		* Environment in:	none
		* Environment out:	none
		*==============================================================================
		
		lparameters tcName
		local llReturn, ;
			lnI, ;
			lcChar
		llReturn = .T.
		for lnI = 1 to len(tcName)
			lcChar = substr(tcName, lnI, 1)
			if not isalpha(lcChar) and not (lnI > 1 and isdigit(lcChar))
				llReturn = .F.
				exit
			endif not isalpha(lcChar) ...
		next lnI
		return llReturn
		
	ENDPROC

	PROCEDURE item		&& Returns an object reference to the specified item
		*==============================================================================
		* Method:			Item
		* Status:			Public
		* Purpose:			Return a reference to the specified item
		* Author:			Doug Hennig
		* Copyright:		(c) 1998 Stonefield Systems Group Inc.
		* Last revision:	05/06/98
		* Parameters:		tuIndex - the index number or name of the desired object
		* Returns:			an object reference to the specified item
		* Environment in:	This.aItems contains one row per contained item, with the
		*						first column being a reference to the object
		*					see This.GetIndex for other "environment in" issues
		* Environment out:	none
		*==============================================================================
		
		lparameters tuIndex
		local lnIndex, ;
			loReturn
		with This
			lnIndex  = .GetIndex(tuIndex)
			loReturn = iif(lnIndex = 0, .NULL., .aItems[lnIndex, 1])
		endwith
		return loReturn
		
	ENDPROC

	PROCEDURE releasemembers
		This.aItems = .NULL.
		dodefault()
		
	ENDPROC

	PROCEDURE removeitem		&& Removes an item from the collection
		*==============================================================================
		* Method:			RemoveItem
		* Status:			Public
		* Purpose:			Removes the specified item from the collection
		* Author:			Doug Hennig
		* Copyright:		(c) 1998 Stonefield Systems Group Inc.
		* Last revision:	06/01/98
		* Parameters:		tuIndex - the index number or name of the desired object
		* Returns:			.T. if the object was removed
		* Environment in:	This.aItems contains one row per contained item, with the
		*						first column being a reference to the object
		*					see This.GetIndex for other "environment in" issues
		* Environment out:	if the object was found, This.Count is decremented and the
		*						row for the specified object removed from This.aItems
		*==============================================================================
		
		lparameters tuIndex
		local llReturn
		with This
		    lnIndex = .GetIndex(tuIndex)
		    if lnIndex > 0
				if .Count = 1
					.Clear()
				else
					adel(.aItems, lnIndex)
					.Count = .Count - 1
					dimension .aItems[.Count, 2]
				endif .Count = 1
				llReturn = .T.
		    endif lnIndex > 0
		endwith
		return llReturn
		
	ENDPROC

ENDDEFINE

DEFINE CLASS sfcollectiononeclass AS sfcollection OF "sfcollection.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*p: citemclass		&& The class to use for objects in this collection
		*p: citemlibrary		&& The library the class specified in cItemClass is contained in
	*</DefinedPropArrayMethod>

	citemclass = 		&& The class to use for objects in this collection
	citemlibrary = 		&& The library the class specified in cItemClass is contained in
	Name = "sfcollectiononeclass"
	
	PROCEDURE about
		*==============================================================================
		* Class:					SFCollectionOneClass
		* Based On:					SFCollection
		* Purpose:					Base class for all collections of a single class
		* Author:					Doug Hennig
		* Copyright:				(c) 1996 Stonefield Systems Group Inc.
		* Last revision:			06/25/99
		* Include file:				none
		*
		* Changes in "Based On" class properties:
		*	None
		*
		* Changes in "Based On" class methods:
		*	AddItem:				passes cItemClass and cItemLibrary to the base
		*							method
		*
		* Custom public properties added:
		*	cItemClass:				the class to use for objects in this collection
		*	cItemLibrary:			the library the class specified in cItemClass is
		*							contained in
		*
		* Custom protected properties added:
		*	None
		*
		* Custom public methods added:
		*	None
		*
		* Custom protected methods added:
		*	None
		*==============================================================================
		
	ENDPROC

	PROCEDURE additem
		lparameters tcName, ;
			tcOther
		if vartype(tcName) = 'O'
			return dodefault(tcName, tcOther)
		else
			return dodefault(This.cItemClass, This.cItemLibrary, tcName)
		endif vartype(tcName) = 'O'
		
	ENDPROC

ENDDEFINE
