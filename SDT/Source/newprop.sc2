*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="newprop.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
#INCLUDE "sdt.h"

DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="1" />

	DataSource = .NULL.
	Height = 0
	Left = 0
	Name = "Dataenvironment"
	Top = 0
	Width = 0

ENDDEFINE

DEFINE CLASS frmnewprop AS sdtmodaldialog OF "sdtcontrols.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="cmdHelp" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblName" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtName" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboType" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblType" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblWidth" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="spnWidth" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblDecimals" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="spnDecimals" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblFieldName" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdOK" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboFieldName" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdCancel" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*p: cmetaalias		&& The alias of the user-defined properties table.
		*p: cmode		&& The mode this form is in: "E" for edit or "N" for new.
		*p: cobjecttype		&& The type of object this new property is for.
		*p: ometa		&& A reference to a DBCXMgr object
		*p: oprop		&& A reference to the PassParameters object.
		*a: atypes[1,2]		&& An array of field types for properties.
	*</DefinedPropArrayMethod>

	Caption = "New Property"
	cmetaalias = 		&& The alias of the user-defined properties table.
	cmode = 		&& The mode this form is in: "E" for edit or "N" for new.
	cobjecttype = 		&& The type of object this new property is for.
	DoCreate = .T.
	Height = 205
	HelpContextID = 40
	Name = "frmNewProp"
	ometa = .NULL.		&& A reference to a DBCXMgr object
	oprop = .NULL.		&& A reference to the PassParameters object.
	outility = .NULL.
	Width = 401

	ADD OBJECT 'cboFieldName' AS sdtcombobox WITH ;
		Format = "!", ;
		InputMask = "XXXXXXXXXX", ;
		Left = 125, ;
		lrequeryoninit = .F., ;
		Name = "cboFieldName", ;
		Style = 0, ;
		TabIndex = 2, ;
		Top = 15, ;
		Value =
		*< END OBJECT: ClassLib="sdtcontrols.vcx" BaseClass="combobox" />

	ADD OBJECT 'cboType' AS sdtcombobox WITH ;
		Left = 125, ;
		Name = "cboType", ;
		RowSource = "Thisform.aTypes", ;
		RowSourceType = 5, ;
		Style = 2, ;
		TabIndex = 6, ;
		Top = 85, ;
		Width = 96, ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="sdtcontrols.vcx" BaseClass="combobox" />

	ADD OBJECT 'cmdCancel' AS sdtexitbuttontext WITH ;
		Left = 158, ;
		Name = "cmdCancel", ;
		TabIndex = 12, ;
		Top = 165, ;
		ZOrderSet = 12
		*< END OBJECT: ClassLib="sdtcontrols.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdHelp' AS sdthelpbuttontext WITH ;
		Left = 248, ;
		Name = "cmdHelp", ;
		TabIndex = 13, ;
		Top = 165, ;
		ZOrderSet = 0
		*< END OBJECT: ClassLib="sdtcontrols.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdOK' AS sdtokbuttontext WITH ;
		Left = 68, ;
		Name = "cmdOK", ;
		TabIndex = 11, ;
		Top = 165, ;
		ZOrderSet = 11
		*< END OBJECT: ClassLib="sdtcontrols.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'lblDecimals' AS sdtlabel WITH ;
		Caption = "Decimals", ;
		Left = 245, ;
		Name = "lblDecimals", ;
		TabIndex = 9, ;
		Top = 123, ;
		Width = 55, ;
		ZOrderSet = 7
		*< END OBJECT: ClassLib="sdtcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'lblFieldName' AS sdtlabel WITH ;
		Caption = "Field Name", ;
		Left = 20, ;
		Name = "lblFieldName", ;
		TabIndex = 1, ;
		Top = 19, ;
		Width = 66, ;
		ZOrderSet = 9
		*< END OBJECT: ClassLib="sdtcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'lblName' AS sdtlabel WITH ;
		Caption = "Property Name", ;
		Left = 20, ;
		Name = "lblName", ;
		TabIndex = 3, ;
		Top = 53, ;
		Width = 84, ;
		ZOrderSet = 1
		*< END OBJECT: ClassLib="sdtcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'lblType' AS sdtlabel WITH ;
		Caption = "Type", ;
		Left = 20, ;
		Name = "lblType", ;
		TabIndex = 5, ;
		Top = 88, ;
		Width = 28, ;
		ZOrderSet = 4
		*< END OBJECT: ClassLib="sdtcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'lblWidth' AS sdtlabel WITH ;
		Caption = "Size", ;
		Left = 20, ;
		Name = "lblWidth", ;
		TabIndex = 7, ;
		Top = 123, ;
		Width = 25, ;
		ZOrderSet = 5
		*< END OBJECT: ClassLib="sdtcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'spnDecimals' AS sdtspinner WITH ;
		Height = 24, ;
		Increment = 1.00, ;
		InputMask = "999", ;
		KeyboardLowValue = 0, ;
		Left = 310, ;
		Name = "spnDecimals", ;
		SelectOnEntry = .T., ;
		SpinnerLowValue = 0.00, ;
		TabIndex = 10, ;
		Top = 120, ;
		Width = 55, ;
		ZOrderSet = 8
		*< END OBJECT: ClassLib="sdtcontrols.vcx" BaseClass="spinner" />

	ADD OBJECT 'spnWidth' AS sdtspinner WITH ;
		Height = 24, ;
		Increment = 1.00, ;
		InputMask = "999", ;
		KeyboardLowValue = 1, ;
		Left = 125, ;
		Name = "spnWidth", ;
		SelectOnEntry = .T., ;
		SpinnerLowValue = 1.00, ;
		TabIndex = 8, ;
		Top = 120, ;
		Width = 55, ;
		ZOrderSet = 6
		*< END OBJECT: ClassLib="sdtcontrols.vcx" BaseClass="spinner" />

	ADD OBJECT 'txtName' AS sdttextbox WITH ;
		Left = 125, ;
		Name = "txtName", ;
		TabIndex = 4, ;
		Top = 50, ;
		Width = 256, ;
		ZOrderSet = 2
		*< END OBJECT: ClassLib="sdtcontrols.vcx" BaseClass="textbox" />
	
	PROCEDURE Init
		lparameters toProperty, ;
			tcMetaAlias, ;
			tcObjectType, ;
			toForm, ;
			tcMode
		with This
			dimension .aTypes[alen(toProperty.aArray, 1), alen(toProperty.aArray, 2)]
			acopy(toProperty.aArray, .aTypes)
			.oProp       = toProperty
			.cMetaAlias  = tcMetaAlias
			.cObjectType = tcObjectType
			.oUtility    = toForm.oUtility
			.oError      = toForm.oError
			.oMeta       = toForm.oMeta
			.cMode       = tcMode
			.Caption     = iif(tcMode = 'E', ccFRM_EDIT_PROP_CAPTION, ;
				ccFRM_NEW_PROP_CAPTION)
			.cboType.Requery()
			.cboFieldName.Requery()
		
		* If we're editing an existing property, get the appropriate values. Otherwise,
		* set some default values.
		
			if tcMode = 'E'
				store _PROPERTY.FIELD_NAME to .cboFieldName.Value, .cboFieldName.Tag
				store _PROPERTY.PROPERTY   to .txtName.Value,      .txtName.Tag
				.cboType.Value     = _PROPERTY.TYPE
				.spnWidth.Value    = _PROPERTY.FIELD_LEN
				.spnDecimals.Value = _PROPERTY.FIELD_DEC
			else
				.cboType.Value  = 'Character'
				.spnWidth.Value = 1
			endif tcMode = 'E'
		endwith
		
		* Call the baseclass Init().
		
		dodefault()
		
	ENDPROC

	PROCEDURE cboFieldName.Requery
		lparameters tlNoAction
		local lcField, ;
			laItems[1], ;
			lnItems, ;
			lnI
		with This
			lcField = _PROPERTY.FIELD_NAME
			select FIELD_NAME from (Thisform.cMetaAlias) ;
				where not Thisform.cObjectType $ OBJECTTYPE or ;
					(Thisform.cMode = 'E' and FIELD_NAME = lcField) ;
				into array laItems
			lnItems = iif(empty(laItems[1]), 0, alen(laItems)) + 1
			dimension .aItems[lnItems]
			.aItems[1] = ''
			for lnI = 1 to lnItems - 1
				.aItems[lnI + 1] = alltrim(laItems[lnI])
			next lnI
		endwith
		
	ENDPROC

	PROCEDURE cboFieldName.validation
		local luReturn, ;
			lcName, ;
			lnI, ;
			lcChar, ;
			lnRecno, ;
			llFound, ;
			llExist, ;
			laTypes[1]
		luReturn = .T.
		lcName   = alltrim(This.DisplayValue)
		if empty(lcName)
			return .T.
		else	
			for lnI = 1 to len(lcName)
				lcChar = substr(lcName, lnI, 1)
				if not (isalpha(lcChar) or (lnI > 1 and (isdigit(lcChar) or lcChar = '_')))
					wait window strtran(ccERR_INVALID_FIELD, ccMSG_INSERT1, lcName) nowait
					luReturn = 0
					exit
				endif not (isalpha(lcChar) ...
			next lnI
		endif empty(lcName)
		if vartype(luReturn) = 'L'
			with Thisform
				lnRecno = recno(.cMetaAlias)
				llFound = seek(lcName, .cMetaAlias, 'FIELD')
				llExist = type('SDTMETA.' + lcName) <> 'U'
				do case
		
		* The name wasn't changed.
		
					case .cMode = 'E' and lcName == alltrim(This.Tag)
		
		* This field name hasn't been used before.
		
					case not llFound and not llExist
						.txtName.Enabled = .T.
						.cboType.Enabled = .T.
						if empty(.txtName.Value)
							.txtName.Value = proper(strtran(lcName, '_', ' '))
						endif empty(.txtName.Value)
						.spnWidth.Refresh()
						.spnDecimals.Refresh()
						.cmdOK.Refresh()
		
		* This field name is a standard property or it's already been defined for this
		* object type.
		
					case (not llFound and llExist) or ;
						.cObjectType $ evaluate(.cMetaAlias + '.OBJECTTYPE')
						wait window ccERR_FIELD_EXISTS nowait
						luReturn = 0
		
		* If we found a field with the same name but a different object type, set the
		* other values according to the field we found and disable them.
		
					otherwise
						acopy(.aTypes, laTypes)
						.txtName.Value       = evaluate(.cMetaAlias + '.PROPERTY')
						.txtName.Enabled     = .F.
						.cboType.ListIndex   = .oUtility.ArrayScan(@laTypes, ;
							evaluate(.cMetaAlias + '.FIELD_TYPE'), 2)
						.cboType.Enabled     = .F.
						.spnWidth.Value      = evaluate(.cMetaAlias + '.FIELD_LEN')
						.spnWidth.Enabled    = .F.
						.spnDecimals.Enabled = .F.
						.cmdOK.Refresh()
				endcase
				.oUtility.Reposition(lnRecno, .cMetaAlias)
			endwith
		endif vartype(luReturn) = 'L'
		return luReturn
		
	ENDPROC

	PROCEDURE cboType.anychange
		with This
			do case
				case .Value = 'Character'
					Thisform.spnDecimals.Value = 0
				case .Value = 'Currency'
					Thisform.spnWidth.Value    = 8
					Thisform.spnDecimals.Value = 4
				case .Value = 'Numeric'
				case .Value = 'Float'
				case .Value = 'Date'
					Thisform.spnWidth.Value    = 8
					Thisform.spnDecimals.Value = 0
				case .Value = 'Double'
					Thisform.spnWidth.Value = 8
				case .Value = 'Integer'
					Thisform.spnWidth.Value    = 4
					Thisform.spnDecimals.Value = 0
				case .Value = 'Logical'
					Thisform.spnWidth.Value    = 1
					Thisform.spnDecimals.Value = 0
				case .Value = 'Memo'
					Thisform.spnWidth.Value    = 4
					Thisform.spnDecimals.Value = 0
				case .Value = 'General'
					Thisform.spnWidth.Value    = 4
					Thisform.spnDecimals.Value = 0
			endcase
		endwith
		Thisform.spnWidth.Refresh()
		Thisform.spnDecimals.Refresh()
		
	ENDPROC

	PROCEDURE cmdOK.Click
		with Thisform.oProp
			.aParameters[1] = Thisform.txtName.Value
			.aParameters[2] = Thisform.cboFieldName.DisplayValue
			.aParameters[3] = Thisform.cboType.Value
			.aParameters[4] = Thisform.spnWidth.Value
			.aParameters[5] = Thisform.aTypes[Thisform.cboType.ListIndex, 2]
			.aParameters[6] = Thisform.spnDecimals.Value
		endwith
		Thisform.Release()
		
	ENDPROC

	PROCEDURE cmdOK.Refresh
		This.Enabled = not empty(Thisform.txtName.Value) and ;
			not empty(Thisform.cboFieldName.DisplayValue)
		
	ENDPROC

	PROCEDURE spnDecimals.Refresh
		with This
			store max(Thisform.spnWidth.Value - 2, 0) to .KeyboardHighValue, ;
				.SpinnerHighValue
			.Value = min(.Value, .KeyboardHighValue)
			store inlist(Thisform.cboType.Value, 'Numeric', 'Float', 'Double') and ;
				Thisform.txtName.Enabled to .Enabled, Thisform.lblDecimals.Enabled
		endwith
		
	ENDPROC

	PROCEDURE spnWidth.anychange
		Thisform.spnDecimals.Refresh()
		
	ENDPROC

	PROCEDURE spnWidth.Refresh
		with Thisform
			do case
				case .cboType.Value = 'Character'
					store 254 to This.KeyboardHighValue, This.SpinnerHighValue
				case .cboType.Value $ 'Numeric,Float'
					store 20 to This.KeyboardHighValue, This.SpinnerHighValue
			endcase
			store inlist(.cboType.Value, 'Character', 'Numeric', 'Float') and ;
				.txtName.Enabled to This.Enabled, .lblWidth.Enabled
		endwith
		
	ENDPROC

	PROCEDURE txtName.validation
		local lnRecno, ;
			luReturn, ;
			llFound
		with Thisform
			lnRecno  = recno(.cMetaAlias)
			luReturn = .T.
			llFound  = seek(upper(This.Value), .cMetaAlias, 'PROPERTY')
			do case
		
		* The name wasn't changed.
		
				case .cMode = 'E' and This.Value == This.Tag
		
		* Ensure the property name doesn't already exist for the same object type.
		
				case (llFound and ;
					.cObjectType $ evaluate(.cMetaAlias + '.OBJECTTYPE')) or ;
					(not llFound and .oMeta.FindProperty(This.Value))
					wait window strtran(ccERR_PROPERTY_EXISTS, ccMSG_INSERT1, ;
						alltrim(This.Value)) nowait
					luReturn = 0
				otherwise
					.cmdOK.Refresh()
			endcase
			.oUtility.Reposition(lnRecno, .cMetaAlias)
		endwith
		return luReturn
		
	ENDPROC

ENDDEFINE
